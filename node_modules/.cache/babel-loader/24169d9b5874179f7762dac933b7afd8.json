{"ast":null,"code":"module.exports = ADSR;\n\nfunction ADSR(audioContext) {\n  var node = audioContext.createGain();\n  var voltage = node._voltage = getVoltage(audioContext);\n  var value = scale(voltage);\n  var startValue = scale(voltage);\n  var endValue = scale(voltage);\n  node._startAmount = scale(startValue);\n  node._endAmount = scale(endValue);\n  node._multiplier = scale(value);\n\n  node._multiplier.connect(node);\n\n  node._startAmount.connect(node);\n\n  node._endAmount.connect(node);\n\n  node.value = value.gain;\n  node.startValue = startValue.gain;\n  node.endValue = endValue.gain;\n  node.startValue.value = 0;\n  node.endValue.value = 0;\n  Object.defineProperties(node, props);\n  return node;\n}\n\nvar props = {\n  attack: {\n    value: 0,\n    writable: true\n  },\n  decay: {\n    value: 0,\n    writable: true\n  },\n  sustain: {\n    value: 1,\n    writable: true\n  },\n  release: {\n    value: 0,\n    writable: true\n  },\n  getReleaseDuration: {\n    value: function value() {\n      return this.release;\n    }\n  },\n  start: {\n    value: function value(at) {\n      var target = this._multiplier.gain;\n      var startAmount = this._startAmount.gain;\n      var endAmount = this._endAmount.gain;\n\n      this._voltage.start(at);\n\n      this._decayFrom = this._decayFrom = at + this.attack;\n      this._startedAt = at;\n      var sustain = this.sustain;\n      target.cancelScheduledValues(at);\n      startAmount.cancelScheduledValues(at);\n      endAmount.cancelScheduledValues(at);\n      endAmount.setValueAtTime(0, at);\n\n      if (this.attack) {\n        target.setValueAtTime(0, at);\n        target.linearRampToValueAtTime(1, at + this.attack);\n        startAmount.setValueAtTime(1, at);\n        startAmount.linearRampToValueAtTime(0, at + this.attack);\n      } else {\n        target.setValueAtTime(1, at);\n        startAmount.setValueAtTime(0, at);\n      }\n\n      if (this.decay) {\n        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay));\n      }\n    }\n  },\n  stop: {\n    value: function value(at, isTarget) {\n      if (isTarget) {\n        at = at - this.release;\n      }\n\n      var endTime = at + this.release;\n\n      if (this.release) {\n        var target = this._multiplier.gain;\n        var startAmount = this._startAmount.gain;\n        var endAmount = this._endAmount.gain;\n        target.cancelScheduledValues(at);\n        startAmount.cancelScheduledValues(at);\n        endAmount.cancelScheduledValues(at);\n        var expFalloff = getTimeConstant(this.release); // truncate attack (required as linearRamp is removed by cancelScheduledValues)\n\n        if (this.attack && at < this._decayFrom) {\n          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at);\n          target.linearRampToValueAtTime(valueAtTime, at);\n          startAmount.linearRampToValueAtTime(1 - valueAtTime, at);\n          startAmount.setTargetAtTime(0, at, expFalloff);\n        }\n\n        endAmount.setTargetAtTime(1, at, expFalloff);\n        target.setTargetAtTime(0, at, expFalloff);\n      }\n\n      this._voltage.stop(endTime);\n\n      return endTime;\n    }\n  },\n  onended: {\n    get: function get() {\n      return this._voltage.onended;\n    },\n    set: function set(value) {\n      this._voltage.onended = value;\n    }\n  }\n};\nvar flat = new Float32Array([1, 1]);\n\nfunction getVoltage(context) {\n  var voltage = context.createBufferSource();\n  var buffer = context.createBuffer(1, 2, context.sampleRate);\n  buffer.getChannelData(0).set(flat);\n  voltage.buffer = buffer;\n  voltage.loop = true;\n  return voltage;\n}\n\nfunction scale(node) {\n  var gain = node.context.createGain();\n  node.connect(gain);\n  return gain;\n}\n\nfunction getTimeConstant(time) {\n  return Math.log(time + 1) / Math.log(100);\n}\n\nfunction getValue(start, end, fromTime, toTime, at) {\n  var difference = end - start;\n  var time = toTime - fromTime;\n  var truncateTime = at - fromTime;\n  var phase = truncateTime / time;\n  var value = start + phase * difference;\n\n  if (value <= start) {\n    value = start;\n  }\n\n  if (value >= end) {\n    value = end;\n  }\n\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}