{"ast":null,"code":"'use strict';\n\nvar load = require('audio-loader');\n\nvar player = require('sample-player');\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\n\n\nfunction instrument(ac, name, options) {\n  if (arguments.length === 1) return function (n, o) {\n    return instrument(ac, n, o);\n  };\n  var opts = options || {};\n  var isUrl = opts.isSoundfontURL || isSoundfontURL;\n  var toUrl = opts.nameToUrl || nameToUrl;\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format);\n  return load(ac, url, {\n    only: opts.only || opts.notes\n  }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination);\n    p.url = url;\n    p.name = name;\n    return p;\n  });\n}\n\nfunction isSoundfontURL(name) {\n  return /\\.js(\\?.*)?$/i.test(name);\n}\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\n\n\nfunction nameToUrl(name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3';\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite';\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js';\n} // In the 1.0.0 release it will be:\n// var Soundfont = {}\n\n\nvar Soundfont = require('./legacy');\n\nSoundfont.instrument = instrument;\nSoundfont.nameToUrl = nameToUrl;\nif (typeof module === 'object' && module.exports) module.exports = Soundfont;\nif (typeof window !== 'undefined') window.Soundfont = Soundfont;","map":null,"metadata":{},"sourceType":"script"}