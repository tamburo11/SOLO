{"ast":null,"code":"'use strict';\n\nvar isArr = Array.isArray;\n\nvar isObj = function isObj(o) {\n  return o && typeof o === 'object';\n};\n\nvar OPTS = {};\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime;\n    var when = time < now ? now : time;\n    player.emit('schedule', when, events);\n    var t, o, note, opts;\n    return events.map(function (event) {\n      if (!event) return null;else if (isArr(event)) {\n        t = event[0];\n        o = event[1];\n      } else {\n        t = event.time;\n        o = event;\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null;\n        opts = o;\n      } else {\n        note = o;\n        opts = OPTS;\n      }\n\n      return player.start(note, when + (t || 0), opts);\n    });\n  };\n\n  return player;\n};","map":null,"metadata":{},"sourceType":"script"}