{"ast":null,"code":"import range from 'just-range';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport difference from 'lodash.difference';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nvar ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nvar PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11\n};\nvar MIDI_NUMBER_C0 = 12;\nvar MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nvar MAX_MIDI_NUMBER = 127;\nvar NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nvar NOTES_IN_OCTAVE = 12; // Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\n\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n\n  var match = NOTE_REGEX.exec(note.toLowerCase());\n\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n\n  var _match = _slicedToArray(match, 4),\n      letter = _match[1],\n      accidental = _match[2],\n      octave = _match[3];\n\n  var pitchName = \"\".concat(letter.toUpperCase()).concat(accidental);\n  var pitchIndex = PITCH_INDEXES[pitchName];\n\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n} //\n// Build cache for getAttributes\n//\n\n\nfunction buildMidiNumberAttributes(midiNumber) {\n  var pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  var octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  var pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: \"\".concat(pitchName).concat(octave),\n    pitchName: pitchName,\n    octave: octave,\n    midiNumber: midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName)\n  };\n}\n\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce(function (cache, midiNumber) {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\n\nvar midiNumberAttributesCache = buildMidiNumberAttributesCache(); // Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\n\nfunction getAttributes(midiNumber) {\n  var attrs = midiNumberAttributesCache[midiNumber];\n\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n\n  return attrs;\n} // Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\n\n\nvar NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(function (midiNumber) {\n  return !getAttributes(midiNumber).isAccidental;\n});\nvar MidiNumbers = {\n  fromNote: fromNote,\n  getAttributes: getAttributes,\n  MIN_MIDI_NUMBER: MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER: MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS: NATURAL_MIDI_NUMBERS\n};\n\nvar Key =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Key, _React$Component);\n\n  function Key() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Key);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Key)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPlayNoteInput\", function () {\n      _this.props.onPlayNoteInput(_this.props.midiNumber);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onStopNoteInput\", function () {\n      _this.props.onStopNoteInput(_this.props.midiNumber);\n    });\n\n    return _this;\n  }\n\n  _createClass(Key, [{\n    key: \"getAbsoluteKeyPosition\",\n    // Key position is represented by the number of natural key widths from the left\n    value: function getAbsoluteKeyPosition(midiNumber) {\n      var OCTAVE_WIDTH = 7;\n\n      var _MidiNumbers$getAttri = MidiNumbers.getAttributes(midiNumber),\n          octave = _MidiNumbers$getAttri.octave,\n          pitchName = _MidiNumbers$getAttri.pitchName;\n\n      var pitchPosition = this.props.pitchPositions[pitchName];\n      var octavePosition = OCTAVE_WIDTH * octave;\n      return pitchPosition + octavePosition;\n    }\n  }, {\n    key: \"getRelativeKeyPosition\",\n    value: function getRelativeKeyPosition(midiNumber) {\n      return this.getAbsoluteKeyPosition(midiNumber) - this.getAbsoluteKeyPosition(this.props.noteRange.first);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          naturalKeyWidth = _this$props.naturalKeyWidth,\n          accidentalWidthRatio = _this$props.accidentalWidthRatio,\n          midiNumber = _this$props.midiNumber,\n          gliss = _this$props.gliss,\n          useTouchEvents = _this$props.useTouchEvents,\n          accidental = _this$props.accidental,\n          active = _this$props.active,\n          disabled = _this$props.disabled,\n          children = _this$props.children; // Need to conditionally include/exclude handlers based on useTouchEvents,\n      // because otherwise mobile taps double fire events.\n\n      return React.createElement(\"div\", {\n        className: classNames('ReactPiano__Key', {\n          'ReactPiano__Key--accidental': accidental,\n          'ReactPiano__Key--natural': !accidental,\n          'ReactPiano__Key--disabled': disabled,\n          'ReactPiano__Key--active': active\n        }),\n        style: {\n          left: ratioToPercentage(this.getRelativeKeyPosition(midiNumber) * naturalKeyWidth),\n          width: ratioToPercentage(accidental ? accidentalWidthRatio * naturalKeyWidth : naturalKeyWidth)\n        },\n        onMouseDown: useTouchEvents ? null : this.onPlayNoteInput,\n        onMouseUp: useTouchEvents ? null : this.onStopNoteInput,\n        onMouseEnter: gliss ? this.onPlayNoteInput : null,\n        onMouseLeave: this.onStopNoteInput,\n        onTouchStart: useTouchEvents ? this.onPlayNoteInput : null,\n        onTouchCancel: useTouchEvents ? this.onStopNoteInput : null,\n        onTouchEnd: useTouchEvents ? this.onStopNoteInput : null\n      }, React.createElement(\"div\", {\n        className: \"ReactPiano__NoteLabelContainer\"\n      }, children));\n    }\n  }]);\n\n  return Key;\n}(React.Component);\n\n_defineProperty(Key, \"propTypes\", {\n  midiNumber: PropTypes.number.isRequired,\n  naturalKeyWidth: PropTypes.number.isRequired,\n  // Width as a ratio between 0 and 1\n  gliss: PropTypes.bool.isRequired,\n  useTouchEvents: PropTypes.bool.isRequired,\n  accidental: PropTypes.bool.isRequired,\n  active: PropTypes.bool.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  accidentalWidthRatio: PropTypes.number.isRequired,\n  pitchPositions: PropTypes.object.isRequired,\n  children: PropTypes.node\n});\n\n_defineProperty(Key, \"defaultProps\", {\n  accidentalWidthRatio: 0.65,\n  pitchPositions: {\n    C: 0,\n    Db: 0.55,\n    D: 1,\n    Eb: 1.8,\n    E: 2,\n    F: 3,\n    Gb: 3.5,\n    G: 4,\n    Ab: 4.7,\n    A: 5,\n    Bb: 5.85,\n    B: 6\n  }\n});\n\nfunction ratioToPercentage(ratio) {\n  return \"\".concat(ratio * 100, \"%\");\n}\n\nvar Keyboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Keyboard, _React$Component);\n\n  function Keyboard() {\n    _classCallCheck(this, Keyboard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Keyboard).apply(this, arguments));\n  }\n\n  _createClass(Keyboard, [{\n    key: \"getMidiNumbers\",\n    // Range of midi numbers on keyboard\n    value: function getMidiNumbers() {\n      return range(this.props.noteRange.first, this.props.noteRange.last + 1);\n    }\n  }, {\n    key: \"getNaturalKeyCount\",\n    value: function getNaturalKeyCount() {\n      return this.getMidiNumbers().filter(function (number) {\n        var _MidiNumbers$getAttri = MidiNumbers.getAttributes(number),\n            isAccidental = _MidiNumbers$getAttri.isAccidental;\n\n        return !isAccidental;\n      }).length;\n    } // Returns a ratio between 0 and 1\n\n  }, {\n    key: \"getNaturalKeyWidth\",\n    value: function getNaturalKeyWidth() {\n      return 1 / this.getNaturalKeyCount();\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.props.width ? this.props.width : '100%';\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      if (!this.props.width) {\n        return '100%';\n      }\n\n      var keyWidth = this.props.width * this.getNaturalKeyWidth();\n      return \"\".concat(keyWidth / this.props.keyWidthToHeight, \"px\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var naturalKeyWidth = this.getNaturalKeyWidth();\n      return React.createElement(\"div\", {\n        className: classNames('ReactPiano__Keyboard', this.props.className),\n        style: {\n          width: this.getWidth(),\n          height: this.getHeight()\n        }\n      }, this.getMidiNumbers().map(function (midiNumber) {\n        var _MidiNumbers$getAttri2 = MidiNumbers.getAttributes(midiNumber),\n            note = _MidiNumbers$getAttri2.note,\n            isAccidental = _MidiNumbers$getAttri2.isAccidental;\n\n        var isActive = _this.props.activeNotes.includes(midiNumber);\n\n        return React.createElement(Key, {\n          naturalKeyWidth: naturalKeyWidth,\n          midiNumber: midiNumber,\n          noteRange: _this.props.noteRange,\n          active: isActive,\n          accidental: isAccidental,\n          disabled: _this.props.disabled,\n          onPlayNoteInput: _this.props.onPlayNoteInput,\n          onStopNoteInput: _this.props.onStopNoteInput,\n          gliss: _this.props.gliss,\n          useTouchEvents: _this.props.useTouchEvents,\n          key: midiNumber\n        }, _this.props.disabled ? null : _this.props.renderNoteLabel({\n          isActive: isActive,\n          isAccidental: isAccidental,\n          midiNumber: midiNumber\n        }));\n      }));\n    }\n  }]);\n\n  return Keyboard;\n}(React.Component);\n\n_defineProperty(Keyboard, \"propTypes\", {\n  noteRange: noteRangePropType,\n  activeNotes: PropTypes.arrayOf(PropTypes.number),\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  renderNoteLabel: PropTypes.func.isRequired,\n  keyWidthToHeight: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  gliss: PropTypes.bool,\n  useTouchEvents: PropTypes.bool,\n  // If width is not provided, must have fixed width and height in parent container\n  width: PropTypes.number\n});\n\n_defineProperty(Keyboard, \"defaultProps\", {\n  disabled: false,\n  gliss: false,\n  useTouchEvents: false,\n  keyWidthToHeight: 0.33,\n  renderNoteLabel: function renderNoteLabel() {}\n});\n\nfunction isNaturalMidiNumber(value) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  return MidiNumbers.NATURAL_MIDI_NUMBERS.includes(value);\n}\n\nfunction noteRangePropType(props, propName, componentName) {\n  var _props$propName = props[propName],\n      first = _props$propName.first,\n      last = _props$propName.last;\n\n  if (!first || !last) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \" must be an object with .first and .last values.\"));\n  }\n\n  if (!isNaturalMidiNumber(first) || !isNaturalMidiNumber(last)) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \" values must be valid MIDI numbers, and should not be accidentals (sharp or flat notes).\"));\n  }\n\n  if (first >= last) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \".first must be smaller than \").concat(propName, \".last.\"));\n  }\n}\n\nvar ControlledPiano =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ControlledPiano, _React$Component);\n\n  function ControlledPiano() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlledPiano);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlledPiano)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isMouseDown: false,\n      useTouchEvents: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleNoteChanges\", function (_ref) {\n      var prevActiveNotes = _ref.prevActiveNotes,\n          nextActiveNotes = _ref.nextActiveNotes;\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var notesStopped = difference(prevActiveNotes, nextActiveNotes);\n      var notesStarted = difference(nextActiveNotes, prevActiveNotes);\n      notesStarted.forEach(function (midiNumber) {\n        _this.props.playNote(midiNumber);\n      });\n      notesStopped.forEach(function (midiNumber) {\n        _this.props.stopNote(midiNumber);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMidiNumberForKey\", function (key) {\n      if (!_this.props.keyboardShortcuts) {\n        return null;\n      }\n\n      var shortcut = _this.props.keyboardShortcuts.find(function (sh) {\n        return sh.key === key;\n      });\n\n      return shortcut && shortcut.midiNumber;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getKeyForMidiNumber\", function (midiNumber) {\n      if (!_this.props.keyboardShortcuts) {\n        return null;\n      }\n\n      var shortcut = _this.props.keyboardShortcuts.find(function (sh) {\n        return sh.midiNumber === midiNumber;\n      });\n\n      return shortcut && shortcut.key;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (event) {\n      // Don't conflict with existing combinations like ctrl + t\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      var midiNumber = _this.getMidiNumberForKey(event.key);\n\n      if (midiNumber) {\n        _this.onPlayNoteInput(midiNumber);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyUp\", function (event) {\n      // This *should* also check for event.ctrlKey || event.metaKey || event.ShiftKey like onKeyDown does,\n      // but at least on Mac Chrome, when mashing down many alphanumeric keystrokes at once,\n      // ctrlKey is fired unexpectedly, which would cause onStopNote to NOT be fired, which causes problematic\n      // lingering notes. Since it's fairly safe to call onStopNote even when not necessary,\n      // the ctrl/meta/shift check is removed to fix that issue.\n      var midiNumber = _this.getMidiNumberForKey(event.key);\n\n      if (midiNumber) {\n        _this.onStopNoteInput(midiNumber);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPlayNoteInput\", function (midiNumber) {\n      if (_this.props.disabled) {\n        return;\n      } // Pass in previous activeNotes for recording functionality\n\n\n      _this.props.onPlayNoteInput(midiNumber, _this.props.activeNotes);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onStopNoteInput\", function (midiNumber) {\n      if (_this.props.disabled) {\n        return;\n      } // Pass in previous activeNotes for recording functionality\n\n\n      _this.props.onStopNoteInput(midiNumber, _this.props.activeNotes);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseDown\", function () {\n      _this.setState({\n        isMouseDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseUp\", function () {\n      _this.setState({\n        isMouseDown: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTouchStart\", function () {\n      _this.setState({\n        useTouchEvents: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderNoteLabel\", function (_ref2) {\n      var midiNumber = _ref2.midiNumber,\n          isActive = _ref2.isActive,\n          isAccidental = _ref2.isAccidental;\n\n      var keyboardShortcut = _this.getKeyForMidiNumber(midiNumber);\n\n      return _this.props.renderNoteLabel({\n        keyboardShortcut: keyboardShortcut,\n        midiNumber: midiNumber,\n        isActive: isActive,\n        isAccidental: isAccidental\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ControlledPiano, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.onKeyDown);\n      window.addEventListener('keyup', this.onKeyUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.onKeyDown);\n      window.removeEventListener('keyup', this.onKeyUp);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.activeNotes !== prevProps.activeNotes) {\n        this.handleNoteChanges({\n          prevActiveNotes: prevProps.activeNotes || [],\n          nextActiveNotes: this.props.activeNotes || []\n        });\n      }\n    } // This function is responsible for diff'ing activeNotes\n    // and playing or stopping notes accordingly.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        onTouchStart: this.onTouchStart,\n        \"data-testid\": \"container\"\n      }, React.createElement(Keyboard, {\n        noteRange: this.props.noteRange,\n        onPlayNoteInput: this.onPlayNoteInput,\n        onStopNoteInput: this.onStopNoteInput,\n        activeNotes: this.props.activeNotes,\n        className: this.props.className,\n        disabled: this.props.disabled,\n        width: this.props.width,\n        keyWidthToHeight: this.props.keyWidthToHeight,\n        gliss: this.state.isMouseDown,\n        useTouchEvents: this.state.useTouchEvents,\n        renderNoteLabel: this.renderNoteLabel\n      }));\n    }\n  }]);\n\n  return ControlledPiano;\n}(React.Component);\n\n_defineProperty(ControlledPiano, \"propTypes\", {\n  noteRange: PropTypes.object.isRequired,\n  activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n  playNote: PropTypes.func.isRequired,\n  stopNote: PropTypes.func.isRequired,\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  renderNoteLabel: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  width: PropTypes.number,\n  keyWidthToHeight: PropTypes.number,\n  keyboardShortcuts: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    midiNumber: PropTypes.number.isRequired\n  }))\n});\n\n_defineProperty(ControlledPiano, \"defaultProps\", {\n  renderNoteLabel: function renderNoteLabel(_ref3) {\n    var keyboardShortcut = _ref3.keyboardShortcut,\n        midiNumber = _ref3.midiNumber,\n        isActive = _ref3.isActive,\n        isAccidental = _ref3.isAccidental;\n    return keyboardShortcut ? React.createElement(\"div\", {\n      className: classNames('ReactPiano__NoteLabel', {\n        'ReactPiano__NoteLabel--active': isActive,\n        'ReactPiano__NoteLabel--accidental': isAccidental,\n        'ReactPiano__NoteLabel--natural': !isAccidental\n      })\n    }, keyboardShortcut) : null;\n  }\n});\n\nvar Piano =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Piano, _React$Component);\n\n  function Piano() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Piano);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Piano)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      activeNotes: _this.props.activeNotes || []\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlePlayNoteInput\", function (midiNumber) {\n      if (_this.props.onPlayNoteInput) {\n        _this.props.onPlayNoteInput(midiNumber, {\n          prevActiveNotes: _this.state.activeNotes\n        });\n      }\n\n      _this.setState(function (prevState) {\n        // Don't append note to activeNotes if it's already present\n        if (prevState.activeNotes.includes(midiNumber)) {\n          return null;\n        }\n\n        return {\n          activeNotes: prevState.activeNotes.concat(midiNumber)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleStopNoteInput\", function (midiNumber) {\n      if (_this.props.onStopNoteInput) {\n        _this.props.onStopNoteInput(midiNumber, {\n          prevActiveNotes: _this.state.activeNotes\n        });\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          activeNotes: prevState.activeNotes.filter(function (note) {\n            return midiNumber !== note;\n          })\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Piano, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Make activeNotes \"controllable\" by using internal\n      // state by default, but allowing prop overrides.\n      if (prevProps.activeNotes !== this.props.activeNotes && this.state.activeNotes !== this.props.activeNotes) {\n        this.setState({\n          activeNotes: this.props.activeNotes || []\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activeNotes = _this$props.activeNotes,\n          onPlayNoteInput = _this$props.onPlayNoteInput,\n          onStopNoteInput = _this$props.onStopNoteInput,\n          otherProps = _objectWithoutProperties(_this$props, [\"activeNotes\", \"onPlayNoteInput\", \"onStopNoteInput\"]);\n\n      return React.createElement(ControlledPiano, _extends({\n        activeNotes: this.state.activeNotes,\n        onPlayNoteInput: this.handlePlayNoteInput,\n        onStopNoteInput: this.handleStopNoteInput\n      }, otherProps));\n    }\n  }]);\n\n  return Piano;\n}(React.Component);\n\n_defineProperty(Piano, \"propTypes\", {\n  noteRange: PropTypes.object.isRequired,\n  activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired),\n  playNote: PropTypes.func.isRequired,\n  stopNote: PropTypes.func.isRequired,\n  onPlayNoteInput: PropTypes.func,\n  onStopNoteInput: PropTypes.func,\n  renderNoteLabel: PropTypes.func,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  width: PropTypes.number,\n  keyWidthToHeight: PropTypes.number,\n  keyboardShortcuts: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    midiNumber: PropTypes.number.isRequired\n  }))\n});\n\nfunction createKeyboardShortcuts(_ref) {\n  var firstNote = _ref.firstNote,\n      lastNote = _ref.lastNote,\n      keyboardConfig = _ref.keyboardConfig;\n  var currentMidiNumber = firstNote;\n  var naturalKeyIndex = 0;\n  var keyboardShortcuts = [];\n\n  while ( // There are still keys to be assigned\n  naturalKeyIndex < keyboardConfig.length && // Note to be assigned does not surpass range\n  currentMidiNumber <= lastNote) {\n    var key = keyboardConfig[naturalKeyIndex];\n\n    var _MidiNumbers$getAttri = MidiNumbers.getAttributes(currentMidiNumber),\n        isAccidental = _MidiNumbers$getAttri.isAccidental;\n\n    if (isAccidental) {\n      keyboardShortcuts.push({\n        key: key.flat,\n        midiNumber: currentMidiNumber\n      });\n    } else {\n      keyboardShortcuts.push({\n        key: key.natural,\n        midiNumber: currentMidiNumber\n      });\n      naturalKeyIndex += 1;\n    }\n\n    currentMidiNumber += 1;\n  }\n\n  return keyboardShortcuts;\n}\n\nvar KeyboardShortcuts = {\n  create: createKeyboardShortcuts,\n  // Preset configurations\n  BOTTOM_ROW: [{\n    natural: 'z',\n    flat: 'a',\n    sharp: 's'\n  }, {\n    natural: 'x',\n    flat: 's',\n    sharp: 'd'\n  }, {\n    natural: 'c',\n    flat: 'd',\n    sharp: 'f'\n  }, {\n    natural: 'v',\n    flat: 'f',\n    sharp: 'g'\n  }, {\n    natural: 'b',\n    flat: 'g',\n    sharp: 'h'\n  }, {\n    natural: 'n',\n    flat: 'h',\n    sharp: 'j'\n  }, {\n    natural: 'm',\n    flat: 'j',\n    sharp: 'k'\n  }, {\n    natural: ',',\n    flat: 'k',\n    sharp: 'l'\n  }, {\n    natural: '.',\n    flat: 'l',\n    sharp: ';'\n  }, {\n    natural: '/',\n    flat: ';',\n    sharp: \"'\"\n  }],\n  HOME_ROW: [{\n    natural: 'a',\n    flat: 'q',\n    sharp: 'w'\n  }, {\n    natural: 's',\n    flat: 'w',\n    sharp: 'e'\n  }, {\n    natural: 'd',\n    flat: 'e',\n    sharp: 'r'\n  }, {\n    natural: 'f',\n    flat: 'r',\n    sharp: 't'\n  }, {\n    natural: 'g',\n    flat: 't',\n    sharp: 'y'\n  }, {\n    natural: 'h',\n    flat: 'y',\n    sharp: 'u'\n  }, {\n    natural: 'j',\n    flat: 'u',\n    sharp: 'i'\n  }, {\n    natural: 'k',\n    flat: 'i',\n    sharp: 'o'\n  }, {\n    natural: 'l',\n    flat: 'o',\n    sharp: 'p'\n  }, {\n    natural: ';',\n    flat: 'p',\n    sharp: '['\n  }, {\n    natural: \"'\",\n    flat: '[',\n    sharp: ']'\n  }],\n  QWERTY_ROW: [{\n    natural: 'q',\n    flat: '1',\n    sharp: '2'\n  }, {\n    natural: 'w',\n    flat: '2',\n    sharp: '3'\n  }, {\n    natural: 'e',\n    flat: '3',\n    sharp: '4'\n  }, {\n    natural: 'r',\n    flat: '4',\n    sharp: '5'\n  }, {\n    natural: 't',\n    flat: '5',\n    sharp: '6'\n  }, {\n    natural: 'y',\n    flat: '6',\n    sharp: '7'\n  }, {\n    natural: 'u',\n    flat: '7',\n    sharp: '8'\n  }, {\n    natural: 'i',\n    flat: '8',\n    sharp: '9'\n  }, {\n    natural: 'o',\n    flat: '9',\n    sharp: '0'\n  }, {\n    natural: 'p',\n    flat: '0',\n    sharp: '-'\n  }, {\n    natural: '[',\n    flat: '-',\n    sharp: '='\n  }]\n};\nexport { ControlledPiano, Piano, Keyboard, KeyboardShortcuts, MidiNumbers };","map":null,"metadata":{},"sourceType":"module"}