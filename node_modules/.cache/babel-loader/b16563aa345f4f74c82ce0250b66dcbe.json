{"ast":null,"code":"/* global AudioBuffer */\n'use strict';\n\nvar ADSR = require('adsr');\n\nvar EMPTY = {};\nvar DEFAULTS = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.9,\n  release: 0.3,\n  loop: false,\n  cents: 0,\n  loopStart: 0,\n  loopEnd: 0\n  /**\n   * Create a sample player.\n   *\n   * @param {AudioContext} ac - the audio context\n   * @param {ArrayBuffer|Object<String,ArrayBuffer>} source\n   * @param {Onject} options - (Optional) an options object\n   * @return {player} the player\n   * @example\n   * var SamplePlayer = require('sample-player')\n   * var ac = new AudioContext()\n   * var snare = SamplePlayer(ac, <AudioBuffer>)\n   * snare.play()\n   */\n\n};\n\nfunction SamplePlayer(ac, source, options) {\n  var connected = false;\n  var nextId = 0;\n  var tracked = {};\n  var out = ac.createGain();\n  out.gain.value = 1;\n  var opts = Object.assign({}, DEFAULTS, options);\n  /**\n   * @namespace\n   */\n\n  var player = {\n    context: ac,\n    out: out,\n    opts: opts\n  };\n  if (source instanceof AudioBuffer) player.buffer = source;else player.buffers = source;\n  /**\n   * Start a sample buffer.\n   *\n   * The returned object has a function `stop(when)` to stop the sound.\n   *\n   * @param {String} name - the name of the buffer. If the source of the\n   * SamplePlayer is one sample buffer, this parameter is not required\n   * @param {Float} when - (Optional) when to start (current time if by default)\n   * @param {Object} options - additional sample playing options\n   * @return {AudioNode} an audio node with a `stop` function\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   * sample.start()\n   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer\n   * @example\n   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)\n   * drums.start('snare')\n   * drums.start('snare', 0, { gain: 0.3 })\n   */\n\n  player.start = function (name, when, options) {\n    // if only one buffer, reorder arguments\n    if (player.buffer && name !== null) return player.start(null, name, when);\n    var buffer = name ? player.buffers[name] : player.buffer;\n\n    if (!buffer) {\n      console.warn('Buffer ' + name + ' not found.');\n      return;\n    } else if (!connected) {\n      console.warn('SamplePlayer not connected to any node.');\n      return;\n    }\n\n    var opts = options || EMPTY;\n    when = Math.max(ac.currentTime, when || 0);\n    player.emit('start', when, name, opts);\n    var node = createNode(name, buffer, opts);\n    node.id = track(name, node);\n    node.env.start(when);\n    node.source.start(when);\n    player.emit('started', when, node.id, node);\n    if (opts.duration) node.stop(when + opts.duration);\n    return node;\n  }; // NOTE: start will be override so we can't copy the function reference\n  // this is obviously not a good design, so this code will be gone soon.\n\n  /**\n   * An alias for `player.start`\n   * @see player.start\n   * @since 0.3.0\n   */\n\n\n  player.play = function (name, when, options) {\n    return player.start(name, when, options);\n  };\n  /**\n   * Stop some or all samples\n   *\n   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime\n   * if not specified)\n   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop\n   * @return {Array} an array of ids of the stoped samples\n   *\n   * @example\n   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)\n   * longSound.start(ac.currentTime)\n   * longSound.start(ac.currentTime + 1)\n   * longSound.start(ac.currentTime + 2)\n   * longSound.stop(ac.currentTime + 3) // stop the three sounds\n   */\n\n\n  player.stop = function (when, ids) {\n    var node;\n    ids = ids || Object.keys(tracked);\n    return ids.map(function (id) {\n      node = tracked[id];\n      if (!node) return null;\n      node.stop(when);\n      return node.id;\n    });\n  };\n  /**\n   * Connect the player to a destination node\n   *\n   * @param {AudioNode} destination - the destination node\n   * @return {AudioPlayer} the player\n   * @chainable\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   */\n\n\n  player.connect = function (dest) {\n    connected = true;\n    out.connect(dest);\n    return player;\n  };\n\n  player.emit = function (event, when, obj, opts) {\n    if (player.onevent) player.onevent(event, when, obj, opts);\n    var fn = player['on' + event];\n    if (fn) fn(when, obj, opts);\n  };\n\n  return player; // =============== PRIVATE FUNCTIONS ============== //\n\n  function track(name, node) {\n    node.id = nextId++;\n    tracked[node.id] = node;\n\n    node.source.onended = function () {\n      var now = ac.currentTime;\n      node.source.disconnect();\n      node.env.disconnect();\n      node.disconnect();\n      player.emit('ended', now, node.id, node);\n    };\n\n    return node.id;\n  }\n\n  function createNode(name, buffer, options) {\n    var node = ac.createGain();\n    node.gain.value = 0; // the envelope will control the gain\n\n    node.connect(out);\n    node.env = envelope(ac, options, opts);\n    node.env.connect(node.gain);\n    node.source = ac.createBufferSource();\n    node.source.buffer = buffer;\n    node.source.connect(node);\n    node.source.loop = options.loop || opts.loop;\n    node.source.playbackRate.value = centsToRate(options.cents || opts.cents);\n    node.source.loopStart = options.loopStart || opts.loopStart;\n    node.source.loopEnd = options.loopEnd || opts.loopEnd;\n\n    node.stop = function (when) {\n      var time = when || ac.currentTime;\n      player.emit('stop', time, name);\n      var stopAt = node.env.stop(time);\n      node.source.stop(stopAt);\n    };\n\n    return node;\n  }\n}\n\nfunction isNum(x) {\n  return typeof x === 'number';\n}\n\nvar PARAMS = ['attack', 'decay', 'sustain', 'release'];\n\nfunction envelope(ac, options, opts) {\n  var env = ADSR(ac);\n  var adsr = options.adsr || opts.adsr;\n  PARAMS.forEach(function (name, i) {\n    if (adsr) env[name] = adsr[i];else env[name] = options[name] || opts[name];\n  });\n  env.value.value = isNum(options.gain) ? options.gain : isNum(opts.gain) ? opts.gain : 1;\n  return env;\n}\n/*\n * Get playback rate for a given pitch change (in cents)\n * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):\n * f2 = f1 * 2^( C / 1200 )\n */\n\n\nfunction centsToRate(cents) {\n  return cents ? Math.pow(2, cents / 1200) : 1;\n}\n\nmodule.exports = SamplePlayer;","map":null,"metadata":{},"sourceType":"script"}