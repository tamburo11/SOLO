{"ast":null,"code":"'use strict';\n\nvar parser = require('note-parser');\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\n\n\nfunction Soundfont(ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected');\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()');\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx);\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl;\n  this.ctx = ctx;\n  this.instruments = {};\n  this.promises = [];\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API');\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()');\n  Promise.all(this.promises).then(callback);\n};\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.');\n  console.log('Please use Soundfont.instrument() instead.');\n  var ctx = this.ctx;\n  name = name || 'default';\n  if (name in this.instruments) return this.instruments[name];\n  var inst = {\n    name: name,\n    play: oscillatorPlayer(ctx, options)\n  };\n  this.instruments[name] = inst;\n\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play;\n      return inst;\n    });\n    this.promises.push(promise);\n\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      promise.then(cb);\n    };\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      cb();\n    };\n  }\n\n  return inst;\n};\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\n\n\nfunction loadBuffers(ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.');\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.');\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers;\n  });\n}\n\nSoundfont.loadBuffers = loadBuffers;\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\n\nfunction oscillatorPlayer(ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.');\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.');\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note);\n    var freq = midi ? parser.midiToFreq(midi, 440) : null;\n    if (!freq) return;\n    duration = duration || 0.2;\n    options = options || {};\n    var destination = options.destination || defaultOptions.destination || ctx.destination;\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine';\n    var gain = options.gain || defaultOptions.gain || 0.4;\n    var vco = ctx.createOscillator();\n    vco.type = vcoType;\n    vco.frequency.value = freq;\n    /* VCA */\n\n    var vca = ctx.createGain();\n    vca.gain.value = gain;\n    /* Connections */\n\n    vco.connect(vca);\n    vca.connect(destination);\n    vco.start(time);\n    if (duration > 0) vco.stop(time + duration);\n    return vco;\n  };\n}\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\n\n\nSoundfont.noteToMidi = parser.midi;\nmodule.exports = Soundfont;","map":null,"metadata":{},"sourceType":"script"}