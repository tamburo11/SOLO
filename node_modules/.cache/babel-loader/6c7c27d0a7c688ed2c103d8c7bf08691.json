{"ast":null,"code":"import _defineProperty from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/MS/Desktop/Projects/mySolo/SOLO/node_modules/@babel/runtime/helpers/esm/inherits\";\n// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nvar SoundfontProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SoundfontProvider, _React$Component);\n\n  function SoundfontProvider(props) {\n    var _this;\n\n    _classCallCheck(this, SoundfontProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SoundfontProvider).call(this, props));\n\n    _this.loadInstrument = function (instrumentName) {\n      // Re-trigger loading state\n      Soundfont.instrument(_this.props.audioContext, instrumentName, {\n        format: _this.props.format,\n        soundfont: _this.props.soundfont,\n        nameToUrl: function nameToUrl(name, soundfont, format) {\n          return \"\".concat(_this.props.hostname, \"/\").concat(soundfont, \"/\").concat(name, \"-\").concat(format, \".js\");\n        }\n      }).then(function (instrument) {\n        // let c = document.getElementsByClassName(\"lds-dual-ring\")[0]\n        //    if (c != undefined) {\n        //     c.className = \"not-lds-dual-ring\"\n        //     c.innerHTML = \"\"\n        //   }\n        _this.setState({\n          instrument: instrument\n        });\n      }); // let c = document.getElementsByClassName(\"lds-dual-ring\")[0]\n      //      if (c != undefined) {\n      //       c.className = \"not-lds-dual-ring\"\n      //     }\n    };\n\n    _this.playNote = function (midiNumber) {\n      _this.resumeAudio().then(function () {\n        var audioNode = _this.state.instrument.play(midiNumber);\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, audioNode))\n        });\n      });\n    };\n\n    _this.stopNote = function (midiNumber) {\n      _this.resumeAudio().then(function () {\n        if (!_this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n\n        var audioNode = _this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, null))\n        });\n      });\n    };\n\n    _this.resumeAudio = function () {\n      if (_this.props.audioContext.state === 'suspended') {\n        return _this.props.audioContext.resume();\n      } else {\n        return Promise.resolve();\n      }\n    };\n\n    _this.stopAllNotes = function () {\n      _this.props.audioContext.resume().then(function () {\n        var activeAudioNodes = Object.values(_this.state.activeAudioNodes);\n        activeAudioNodes.forEach(function (node) {\n          if (node) {\n            node.stop();\n          }\n        });\n\n        _this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    };\n\n    _this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n    return _this;\n  }\n\n  _createClass(SoundfontProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.instrumentName !== this.props.instrumentName) {\n        this.loadInstrument(this.props.instrumentName);\n      }\n\n      if (prevState.instrument !== this.state.instrument) {\n        if (!this.props.onLoad) {\n          return;\n        }\n\n        this.props.onLoad({\n          playNote: this.playNote,\n          stopNote: this.stopNote,\n          stopAllNotes: this.stopAllNotes\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.render ? this.props.render({\n        isLoading: !this.state.instrument,\n        playNote: this.playNote,\n        stopNote: this.stopNote,\n        stopAllNotes: this.stopAllNotes\n      }) : null;\n    }\n  }]);\n\n  return SoundfontProvider;\n}(React.Component);\n\nSoundfontProvider.propTypes = {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  audioContext: PropTypes.instanceOf(window.AudioContext),\n  onLoad: PropTypes.func,\n  render: PropTypes.func\n};\nSoundfontProvider.defaultProps = {\n  format: 'mp3',\n  soundfont: 'MusyngKite' // instrumentName: 'viola',\n\n};\nexport default SoundfontProvider;","map":{"version":3,"sources":["/Users/MS/Desktop/Projects/mySolo/SOLO/src/components/keyboard/SoundfontProvider.js"],"names":["React","PropTypes","Soundfont","SoundfontProvider","props","loadInstrument","instrumentName","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","setState","playNote","midiNumber","resumeAudio","audioNode","state","play","activeAudioNodes","Object","assign","stopNote","stop","resume","Promise","resolve","stopAllNotes","values","forEach","node","prevProps","prevState","onLoad","render","isLoading","Component","propTypes","string","isRequired","oneOf","instanceOf","window","AudioContext","func","defaultProps"],"mappings":"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","sourcesContent":["// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n    audioContext: PropTypes.instanceOf(window.AudioContext),\n    onLoad: PropTypes.func,\n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    // instrumentName: 'viola',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n\n    if (prevState.instrument !== this.state.instrument) {\n      if (!this.props.onLoad) {\n        return;\n      }\n      this.props.onLoad({\n        playNote: this.playNote,\n        stopNote: this.stopNote,\n        stopAllNotes: this.stopAllNotes,\n      });\n    }\n  }\n\n\n\n\n\n  loadInstrument = (instrumentName) => {\n    // Re-trigger loading state\n\n\n   \n\n\n\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then((instrument) => {\n      // let c = document.getElementsByClassName(\"lds-dual-ring\")[0]\n      //    if (c != undefined) {\n      //     c.className = \"not-lds-dual-ring\"\n      //     c.innerHTML = \"\"\n      //   }\n      this.setState({\n        instrument,\n      });\n\n    });\n\n    // let c = document.getElementsByClassName(\"lds-dual-ring\")[0]\n    //      if (c != undefined) {\n    //       c.className = \"not-lds-dual-ring\"\n    //     }\n  };\n\n  playNote = (midiNumber) => {\n    this.resumeAudio().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = (midiNumber) => {\n    this.resumeAudio().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, { [midiNumber]: null }),\n      });\n    });\n  };\n\n  resumeAudio = () => {\n    if (this.props.audioContext.state === 'suspended') {\n      return this.props.audioContext.resume();\n    } else {\n      return Promise.resolve();\n    }\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach((node) => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render\n    ? this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes,\n    })\n    : null;\n  }\n}\n\nexport default SoundfontProvider;\n"]},"metadata":{},"sourceType":"module"}